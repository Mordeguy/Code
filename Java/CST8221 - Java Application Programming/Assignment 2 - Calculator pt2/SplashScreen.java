/*FILE HEADER -------------------------------------------------------------------------------------------------------
          File Name:  SplashScreen.java
             Author:  Nathan M. Abbey, 040-557-192
             Course:  CST8221 - Java Application Programming
        Lab Section:  301
  Assignment Number:  01 pt.2
               Date:  November 28th, 2017
          Professor:  Svillen Ranev
            Purpose:  This program build a calculator GUI for a user to interact with. It responds to events
                      generated by the GUI and calculates mathematical formulas based on valid user inputs. 
         Class List:  1. SplashScreen <--
         			  2. Calculator
         			  3. CalculatorViewController
         			  4. Controller (inner anonymous class)
         			  5. Calculator Model
 -------------------------------------------------------------------------------------------------------------------*/
/**
 * This class is responsible for building a splash screen on a JWindow and displaying it for a specific
 * amount of time. The splash screen will display, by calling the method showSplashScreen(), for amount of time the 
 * user inputs. Once the time expires the splash screen closes and the calculator application starts up.
 *   
 * @author Nathan M. Abbey
 * @version 1.0
 * @see  Calculator.java
 * @since  1.8_066
 */
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JWindow;
import javax.swing.SwingConstants;

public class SplashScreen extends JWindow {

	
	/**Required by default for Swing applications*/
	private static final long serialVersionUID = 1L;

	/**The period of time (in milliseconds) the splash screen will display*/
	private int duration;

	/**
	 * This is the initial constructor which takes in a duration and sets it as
	 * the duration for the splash screen to display.
	 * 
	 * @param newDuration The duration (in milliseconds) for the splash screen to display
	 */
	public SplashScreen(int newDuration) {
		duration = newDuration;
	}


	/**
	 * This method sets up the splash screen on the JWindow and displays it. The method
	 * creates a JPanel and sets it's size, location, and content. The user can add
	 * text, gifs, or images to the splash screen as desired. Once the JPanel is set up
	 * it is set as the content pane for the JWindow.
	 */
	public void showSplashWindow() {

		//Used as the holder for all of the content in the splash screen
		JPanel splash;

		//Used to determine the screen size to initialize size/positioning of the splash screen
		Dimension screen;

		//JLabels used to add content to the JPanel in order to decorate the splash screen.
		JLabel splashPic, top, bottom;

		splash = new JPanel(new BorderLayout());

		// Determines the screen size and sets the bounds of the splash screen
		int width =  500;
		int height = 300;
		screen = Toolkit.getDefaultToolkit().getScreenSize();
		int x = (screen.width-width)/2;
		int y = (screen.height-height)/2;
		setBounds(x,y,width,height);

		splash.setBackground(Color.BLACK);

		// Adds user inputed white text to the top of the splash screen
		top = new JLabel("Nathan M. Abbey   -   040-557-192", JLabel.CENTER);
		top.setFont(new Font(null, Font.BOLD, 16));
		top.setForeground(Color.WHITE);
		splash.add(top, BorderLayout.NORTH);

		// Loads an image on to a JLabel and places it in the center
		splashPic = new JLabel(new ImageIcon(getClass().getResource("Calc.jpg"))); 
		splash.add(splashPic, BorderLayout.CENTER);

		// Adds user inputed white text to the bottom of the splash screen
		bottom = new JLabel("CST8221 - Assignment 1 : Part 2 - Calculator GUI", SwingConstants.CENTER);
		bottom.setFont(new Font(null, Font.BOLD, 18));
		bottom.setForeground(Color.WHITE);
		splash.add(bottom, BorderLayout.SOUTH);
		setContentPane(splash);

		setVisible(true);

		// Ensures the application will not continue until the duration has expired
		try {
			Thread.sleep(duration); }
		catch (InterruptedException e) {}

		// Disposes of all objects once finished
		dispose();
	}
}