/*FILE HEADER -------------------------------------------------------------------------------------------------------
          File Name:  CalculatorModel.java
             Author:  Nathan M. Abbey, 040-557-192
             Course:  CST8221 - Java Application Programming
        Lab Section:  301
  Assignment Number:  01 pt.2
               Date:  November 28th, 2017
          Professor:  Svillen Ranev
            Purpose:  This program build a calculator GUI for a user to interact with. It responds to events
                      generated by the GUI and calculates mathematical formulas based on valid user inputs. 
         Class List:  1. SplashScreen 
         			  2. Calculator
         			  3. CalculatorViewController 
         			  4. Controller (inner class)
         			  5. CalculatorModel <-- 
 -------------------------------------------------------------------------------------------------------------------*/
/**
 * This class handles mathematical formulas and allows for calculations. This class uses BigDecimal in order to
 * avoid calculation errors and allow output formatting. The class formats the output based on the operational
 * mode, and handles errors.
 * 
 * @author Nathan M. Abbey
 * @version 1.0
 * @see CalculatorViewController.java
 * @since 1.8_066
 */
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;


public class CalculatorModel {
	
	/**Initially sets the Operational Mode to 2; which is .00*/
	private int operationalMode;
	/**The mathematical arithmetic operator*/
	private String arithOp = "";
	/**Determines if there is an error, and sets functionality accordingly*/
	private boolean errorState;
	/**First and second operand of the equation*/
	private String operand1;
	private String operand2;


	/**This default constructor allows other the outer class to create an object of this class and allow for the
	 * manipulation of the class variables. Specifically, the solving of mathematical equations using BigDecimal 
	 * format.
	 * */
	public CalculatorModel(){
		errorState = false;
		operationalMode = 2;
	}


	// OPERAND 1 -------------------------------------------------------------------------------------|
	/**
	 * This method takes a String and sets it as operand1. (the first number in an equation)
	 * @param c String to set operand1 to
	 */
	public void setOperand1(String c){
		operand1 = c;
	}	
	/**
	 * Returns the String format of operand1
	 * @return operand1 The first number in an equation in String format
	 */
	public String getOperand1(){
		return operand1;
	}
	// ----------------------------------------------------------------------------------------------|


	
	// OPERAND 2 ------------------------------------------------------------------------------------|	
	/**
	 * This method takes a String and sets it as operand2. (the second number in an equation)
	 * @param c String to set operand2 to
	 */
	public void setOperand2(String c){
		operand2 = c;
	}
	/**
	 * Returns the String format of operand2
	 * @return operand2 The second number in an equation in String format
	 */
	public String getOperand2(){
		return operand2;
	}
	// ----------------------------------------------------------------------------------------------|
	
	
	
	// ARITHMETIC OPERATOR --------------------------------------------------------------------------|		
	/**
	 * This method takes a String and sets it to the arithmetic operator.
	 * @param c String to set the arithmetic operator to
	 */
	public void setArithmeticOp(String c){
		arithOp = c;
	}
	/**
	 * Returns the String format of the arithmetic operator.
	 * @return
	 */
	public String getArithmeticOp(){
		return arithOp;
	}
	// ----------------------------------------------------------------------------------------------|
	
	
	
	// ERROR STATE  ---------------------------------------------------------------------------------|	
	/**
	 * This methods takes a boolean and sets the errorSteate to: TRUE or FALSE.
	 * @param b Boolean that is TRUE when there is an error, and FALSE when there is no error.
	 */
	public void setErrorState(boolean b){
		errorState = b;
	}
	/**
	 * Returns the boolean errorState. Either: TRUE or FALSE.
	 * @return errorState Boolean that determines how the calculator will react based on status.
	 */
	public boolean getErrorState(){
		return errorState;
	}
	
	// ----------------------------------------------------------------------------------------------|

	
	
	// OPERATIONAL MODE  ----------------------------------------------------------------------------|	
	/**
	 * This method sets the operational modem which formats output as needed.
	 * @param a An int that determines which operational mode the calculator is operating in.
	 */
	public void setOpMode(int a){
		
		// INT - Integer Mode (0); no decimals           
		if (a == 0)
			operationalMode = 0;
	
		// 0.0 - Float mode; 1 decimal place
		if (a == 1)
			operationalMode = 1;
		
		//0.00 - Float mode, 2 decimal places
		if (a == 2)
			operationalMode = 2;
		
		// SCI - Scientific Mode, scientific notation
		if (a == 3)
			operationalMode = 3;	
	}
	/**
	 * Returns the operational mode. (0 = Int, 1 = 1 Decimal Place, 2 = 2 Decimal Places, 3 = Scientific Notation)  
	 * @return operationalMode The operational mode the calculator is currently operating in.
	 */
	public int getOperationalMode(){
		return operationalMode;
	}
	
	// ----------------------------------------------------------------------------------------------|
	
	

	// RESULT  --------------------------------------------------------------------------------------|
	public String getResult(){
		
		// BigDecimal used to avoid calculation errors
		BigDecimal digit1 = new BigDecimal(operand1); 
		BigDecimal digit2 = new BigDecimal (operand2);
		BigDecimal result = null;
		// String used to format the result as a String
		String stringResult = null;

		// Switch statement to handle the calculations based on the arithmetic operator
		switch (arithOp){
		case "-":
			result = digit1.subtract(digit2);
			break;
		case "+":
			result = digit1.add(digit2);
			break;
		case "/":
			result = digit1.divide(digit2, new MathContext(15, RoundingMode.HALF_UP));
			break;
		case "*":
			result = digit1.multiply(digit2, new MathContext(15, RoundingMode.HALF_UP));
			break;
		}
	
		// This code formats the output based on the calculator's operational mode
		if (operationalMode == 0)
			result = result.setScale(0, BigDecimal.ROUND_HALF_UP);
		if (operationalMode == 1)
			result = result.setScale(1, BigDecimal.ROUND_HALF_UP);
		if (operationalMode == 2)
			result = result.setScale(2, BigDecimal.ROUND_HALF_UP);
		
		// This converts the number in to Scientific Notation
		if(operationalMode == 3){
			Float f = Float.valueOf(result.floatValue());
			stringResult = result.toString();
			stringResult = String.format("%E", f);		

		} else {
			stringResult = String.valueOf(result);
		}
		
		return stringResult;
	}
	// ----------------------------------------------------------------------------------------------|
	
	
}// End of CalculatorModel Class