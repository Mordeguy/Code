/*FILE HEADER -------------------------------------------------------------------------------------------------------
          File Name:  CalculatorViewController.java
             Author:  Nathan M. Abbey, 040-557-192
             Course:  CST8221 - Java Application Programming
        Lab Section:  301
  Assignment Number:  01
               Date:  October 19, 2017
          Professor:  Svillen Ranev
            Purpose:  This program build a calculator GUI for a user to interact with. It responds to events
                      generated by the GUI and displays the 'Action Command' on to the calculator display.
         Class List:  1. SplashScreen 
         			  2. Calculator
         			  3. CalculatorViewController <--
         			  4. Controller (inner anonymous class) <--
 -------------------------------------------------------------------------------------------------------------------*/
/**
 * This class extends JPanel and creates the GUI visuals and formatting for a calculator application. It implements
 * the use of JComponents to create the applications calculator components. All of the components are created in
 * the default constructor and added to the JFrame. This class also implements ActionListener in order to handle the
 * events created by interacting with the calculator GUI.
 * 
 * @author Nathan M. Abbey
 * @version 1.0
 * @see Calculator.java, SplashScreen.java
 * @since 1.8_066
 */
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

public class CalculatorViewController extends JPanel implements ActionListener{

	/**Required by default for Swing applications*/
	private static final long serialVersionUID = 1L;
	/**The left-hand side of the calculator display*/
	private JTextField display1;
	/**The right-hand side of the calculator display*/
	private JTextField display2;
	/**The MODE/ERROR display label*/
	private JLabel error;
	/**The dot (.) button used for decimal places*/
	private JButton dotButton;


	/**This default constructor builds the GUI of the calculator and formats and adds it to a JPanel. The
	 * numerical calculator buttons are created using the method createButton() in a loop. 
	 * */
	public CalculatorViewController(){
		/**This is the hex symbol for the backspace button*/
		String b = "\u00B1";
		/**The numerical buttons will use this array to run through a loop to be created*/
		String buttonSymbols []= {"7", "8", "9", "/", "4", "5", "6", "*", "1", "2", "3", "-", "0", ".", b, "+" };

		/**These components make up the top layer of the calculator*/
		JPanel topOfCalc = new JPanel();
		JPanel textPanel = new JPanel();
		JPanel radioMode = new JPanel();
		JPanel radioPanel = new JPanel();
		JButton fButton = new JButton();
		JButton backSpace = new JButton();
		
		/**These components make up the black mode area of the calculator*/
		JCheckBox modeBox = new JCheckBox();
		JRadioButton radio1 = new JRadioButton();
		JRadioButton radio2 = new JRadioButton();
		JRadioButton radio3 = new JRadioButton();
		
		/**Used to group the checkbox and radio buttons so only one can be selected at a time*/
		ButtonGroup bg = new ButtonGroup();
		
		/**This panel holds the 2 previous areas and is used to enable both to be put on BorderLayout.NORTH*/
		JPanel topHolder = new JPanel();
		
		/**These components make up the bottom of the calculator; the numeric key pad.*/
		JPanel calcBottom = new JPanel();
		JPanel jp4 = new JPanel();
		JPanel lastButtons = new JPanel();

		setLayout(new BorderLayout());

		//JPanel that is top panel to hold the 2 yellow buttons and calculator display
		topOfCalc.setVisible(true);
		topOfCalc.setBackground(Color.YELLOW);
		topOfCalc.setLayout(new BorderLayout());

		//Initializes the JLabel and puts it's content on the F button and adds it to JPanel 'topOfCalc'
		error = new JLabel("F");
		fButton = new JButton();
		fButton.setLayout(new BoxLayout(fButton, BoxLayout.LINE_AXIS));
		fButton.setActionCommand("F");
		fButton.addActionListener(this);
		fButton.setFocusPainted(false);
		fButton.setText(error.getText());
		fButton.setFont(new Font(null, Font.PLAIN, 20));
		fButton.setBackground(Color.YELLOW);
		fButton.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.BLACK));
		fButton.setPreferredSize(new Dimension(35, 55));
		topOfCalc.add(fButton, BorderLayout.WEST);
		
		//JPanel that will hold the 2 JTextFields for the calculator display
		textPanel.setLayout(new GridLayout(2,0));
		textPanel.setBackground(Color.WHITE);
		textPanel.setVisible(true);

		//Initializes 2 JTextFields, adds them to panel 'textPanel' and adds panel to the calculator
		display1 = new JTextField(16);
		display1.setEditable(false);
		display1.setBorder(BorderFactory.createEmptyBorder());
		display1.setBackground(Color.WHITE);
		display2 = new JTextField(16);
		display2.setEditable(false);
		display2.setText("0.0");
		display2.setBorder(BorderFactory.createEmptyBorder());
		display2.setBackground(Color.WHITE);
		display2.setHorizontalAlignment(JTextField.RIGHT);
		textPanel.add(display1);
		textPanel.add(display2);
		topOfCalc.add(textPanel, BorderLayout.CENTER);

		//Initializes right-hand button at the top of the calculator and adds it
		backSpace = createButton("\u21B2", "backspace", Color.BLACK, Color.BLACK, this);
		backSpace.setToolTipText("ALT-B(Backspace)");
		backSpace.setFocusPainted(false);
		backSpace.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.BLACK));
		backSpace.setPreferredSize(new Dimension(35, 55));
		backSpace.setContentAreaFilled(false);
		backSpace.setMnemonic('B');
		topOfCalc.add(backSpace, BorderLayout.EAST);

		//JPanel to hold the radio buttons and check box
		radioMode.setBackground(Color.BLACK);
		radioMode.setVisible(true);

		//Setup the check-box on the calculator and adds it
		modeBox.setVisible(true);
		modeBox.setText("Int");
		modeBox.setBackground(Color.GREEN);
		modeBox.setActionCommand("Int");
		modeBox.addActionListener(this);
		radioMode.add(modeBox);
		
		//Adds a blank area to keep a space between the check-box and radio buttons
		radioMode.add(Box.createRigidArea(new Dimension(30, 0)));
		radioMode.setPreferredSize(new Dimension(0, 40));

		//JPanel to hold the 3 radio buttons 
		radioPanel.setLayout(new GridLayout());
		radioPanel.setBackground(Color.YELLOW);
		radioPanel.setVisible(true);

		//First radio button
		radio1.setBackground(Color.YELLOW);
		radio1.setText(".0");
		radio1.setActionCommand(".0");
		radio1.addActionListener(this);
		
		//Second radio button; this one is selected by default at startup
		radio2.setBackground(Color.YELLOW);
		radio2.setSelected(true);
		radio2.setText(".00");
		radio2.setActionCommand(".00");
		radio2.addActionListener(this);

		//Third radio button
		radio3.setBackground(Color.YELLOW);
		radio3.setText("Sci");
		radio3.setActionCommand("Sci");
		radio3.addActionListener(this);
		
		//Adds the check-box and radio buttons to a ButtonGroup so only one can be selected at a time
		bg.add(radio1);
		bg.add(radio2);
		bg.add(radio3);
		bg.add(modeBox);

		//Adds the 3 radio buttons to the JPanel then adds that to the black area of calculator
		radioPanel.add(radio1);
		radioPanel.add(radio2);
		radioPanel.add(radio3);
		radioMode.add(radioPanel);
		
		//Puts the first 2 top areas in to a JPanel that is added to the top layer JPanel
		topHolder.setLayout(new BorderLayout());
		topHolder.add(topOfCalc, BorderLayout.NORTH);
		topHolder.add(radioMode, BorderLayout.SOUTH);
		add(topHolder, BorderLayout.NORTH);

		//Sets up the JPanel for the numeric keypad of the calculator
		calcBottom.setVisible(true);
		calcBottom.setBackground(Color.GREEN);
		calcBottom.setLayout(new BorderLayout());

		//JPanel to hold the keypad with all the same size buttons
		jp4.setLayout(new GridLayout(4,4, 2,2));
		jp4.setVisible(true);
		jp4.setBackground(Color.WHITE);
		jp4.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

		//Loops through createButton() to populate the JPanel 'jp4' with buttons
		for (int i = 0; i < buttonSymbols.length; i++){

			// Colors the appropriate buttons CYAN
			if (buttonSymbols[i].equals("/") || buttonSymbols[i].equals("*") || buttonSymbols[i].equals("-") || buttonSymbols[i].equals("+")){
				jp4.add(createButton(buttonSymbols[i], buttonSymbols[i], Color.black, Color.CYAN, this));
				
			// Colors the specific button PINK
			} else if (buttonSymbols[i].equals(b)) {
				jp4.add(createButton(buttonSymbols[i], buttonSymbols[i], Color.black, Color.PINK, this));

			} else if (buttonSymbols[i].equals(".")) {
				// Assigns the '.' button to the global variable dotButton, then adds it to the keypad
				dotButton = createButton(buttonSymbols[i], buttonSymbols[i], Color.black, Color.BLUE, this);
				jp4.add(dotButton);
				
			} else {
				// This creates all default buttons without special traits
				jp4.add(createButton(buttonSymbols[i], buttonSymbols[i], Color.black, Color.BLUE, this));
			}
		}

		//Sets the keypad to BorderLayout.CENTER, so that the keypad expands dynamically with window
		calcBottom.add(jp4, BorderLayout.CENTER);

		//Sets up a JPanel and creates the final 2 buttons (C, =) on the right-hand side of the keypad
		lastButtons.setLayout(new GridLayout(2, 0, 2, 2));
		lastButtons.setPreferredSize(new Dimension(50, 10));
		lastButtons.setBackground(Color.WHITE);
		lastButtons.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 2));
		JButton clear = createButton("C", "C", Color.black, Color.RED, this); 	
		JButton equals = createButton("=", "=", Color.black, Color.MAGENTA, this); 
		lastButtons.add(clear);
		lastButtons.add(equals);
		calcBottom.add(lastButtons, BorderLayout.EAST);
		
		//Adds the entire JPanel to the top JPanel in the CENTER so it dynamically sizes itself
		add(calcBottom, BorderLayout.CENTER);
	}



	/***
	 * This method create a JButton. It is used in this program to add the numeric keypad buttons
	 * to the calculator in a loop. This makes this program easier to code as it automates this
	 * process. 
	 * 
	 * @param text The String text that will appear on the button
	 * @param ac The action command associated with the Event generated by the button
	 * @param fg The text color of the button
	 * @param bg The background color of the button
	 * @param handler The object which handles events generated by the buttons
	 * @return Initialized JButton
	 */
	private JButton createButton(String text, String ac, Color fg, Color bg, ActionListener handler){

		//Create a JButton object ands sets its text to the 'text' parameter
		JButton newButton = new JButton(text);
		
		//Sets foreground and background colors using the input parameters
		newButton.setForeground(fg);
		newButton.setBackground(bg);

		//Set the JButtons action command, skip if the parameter is NULL
		if(ac != null){
			newButton.setActionCommand(ac);
		}

		//Sets the font of the button
		Font  font = new Font(null, Font.PLAIN, 20);	
		newButton.setFont(font);
		
		//Adds the action listener
		newButton.addActionListener(handler);
		
		//Returns JButton
		return newButton;	 	
	}

	
/**
 * This anonymous inner class method handles the events produced by the calculator GUI. The method
 * takes in the event and decides what to do based on the event's 'Action Command'. In this
 * instance it will display the action event on to the calculator screen.
 * 
 * @param ActionEvent generated by clicking a button on the calculator GUI
 */
	@Override
	public void actionPerformed(ActionEvent e) {

		if (e.getActionCommand() == "1")
			display2.setText("1");		

		if (e.getActionCommand() == "2")
			display2.setText("2");		
		
		if (e.getActionCommand() == "3")
			display2.setText("3");		
		
		if (e.getActionCommand() == "4")
			display2.setText("4");		
		
		if (e.getActionCommand() == "5")
			display2.setText("5");		
		
		if (e.getActionCommand() == "6")
			display2.setText("6");		
		
		if (e.getActionCommand() == "7")
			display2.setText("7");		

		if (e.getActionCommand() == "8")
			display2.setText("8");		
		
		if (e.getActionCommand() == "9")
			display2.setText("9");

		if (e.getActionCommand() == "0")
			display2.setText("0");		

		if (e.getActionCommand() == "+")
			display2.setText("+");		

		if (e.getActionCommand() == "-")
			display2.setText("-");		

		if (e.getActionCommand() == "*")
			display2.setText("*");		

		if (e.getActionCommand() == "=")
			display2.setText("=");		
		
		if (e.getActionCommand() == "/")
			display2.setText("/");		
		
		if(e.getActionCommand().equals("\u00B1"))
			display2.setText("\u00B1");
		
		if (e.getActionCommand() == "C")
			display2.setText("C");		

		if (e.getActionCommand().equals("backspace"))
			display2.setText("\u21B2");

		if (e.getActionCommand().equals("F"))
			display2.setText("F");		

		if (e.getActionCommand().equals("."))
			display2.setText(".");		

		if (e.getActionCommand().equals("Int"))
			display2.setText("Int");		

		if (e.getActionCommand().equals(".0"))
			display2.setText(".0");		

		if (e.getActionCommand().equals(".00"))
			display2.setText(".00");		

		if (e.getActionCommand().equals("Sci"))
			display2.setText("Sci");		
	}  
}
