/*FILE HEADER -------------------------------------------------------------------------------------------------------
          File Name:  ClientView.java
             Author:  Nathan M. Abbey, 040-557-192
             Course:  CST8221 - Java Application Programming
        Lab Section:  301
  Assignment Number:  02 pt. 2
               Date:  January 4, 2018
          Professor:  Svillen Ranev
            Purpose:  This program creates a GUI client that can connect to a server. The server responds to commands
                      input by the client and displays messages.
                      object and begin.
         Class List:  1. Client 
                      2. ClientView <--
                      3. SocketConnect (inner class) <--
 -------------------------------------------------------------------------------------------------------------------*/
/**
 * This class builds the client GUI and handles all GUI interactions. It responds to the client
 * input and interactions with the buttons and text fields and responds accordingly. 
 *   
 * @author Nathan M. Abbey
 * @version 1.0
 * @see Client.javs
 * @since 1.8_066
 */
package learn;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ClientView extends javax.swing.JFrame {
 
  /*THese global vairables are used to initilie the connection to the Server*/
  private String hostName;
  private String command = "";
  private int portNo;
  SocketConnect sC;
    
    /*This constrctor initialzes all of the GUI components of the client*/
    public ClientView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        hostLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        localhostText = new javax.swing.JTextField();
        portChoice = new javax.swing.JComboBox<>();
        connectButton = new javax.swing.JButton();
        middlePanel = new javax.swing.JPanel();
        requestCommand = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        bottomPane = new javax.swing.JPanel();
        scrollTextPane = new javax.swing.JScrollPane();
        terminalText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nathan's Client/Server GUI");
        setMinimumSize(new java.awt.Dimension(610, 550));
        setPreferredSize(new java.awt.Dimension(610, 550));

        topPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 8, true), "CONNECTION", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        hostLabel.setDisplayedMnemonic('H');
        hostLabel.setLabelFor(localhostText);
        hostLabel.setText("Host:");
        hostLabel.setPreferredSize(new java.awt.Dimension(40, 20));

        portLabel.setDisplayedMnemonic('P');
        portLabel.setLabelFor(portChoice);
        portLabel.setText("Port:");
        portLabel.setPreferredSize(new java.awt.Dimension(40, 40));

        localhostText.setText("localhost");
        localhostText.setCaretPosition(0);
        localhostText.setMargin(new java.awt.Insets(2, 5, 2, 2));
        localhostText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localhostTextActionPerformed(evt);
            }
        });

        portChoice.setEditable(true);
        portChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "8089", "65001", "65535" }));
        portChoice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                portChoiceFocusGained(evt);
            }
        });
        portChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portChoiceActionPerformed(evt);
            }
        });
        portChoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                portChoiceKeyPressed(evt);
            }
        });

        connectButton.setBackground(new java.awt.Color(255, 0, 0));
        connectButton.setMnemonic('c');
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addContainerGap(124, Short.MAX_VALUE))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(localhostText))))
        );

        topPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connectButton, portChoice});

        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localhostText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        topPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {connectButton, portChoice});

        middlePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 8, true), "CLIENT REQUEST", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        requestCommand.setText("Type a request command");
        requestCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestCommandActionPerformed(evt);
            }
        });

        sendButton.setMnemonic('s');
        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout middlePanelLayout = new javax.swing.GroupLayout(middlePanel);
        middlePanel.setLayout(middlePanelLayout);
        middlePanelLayout.setHorizontalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(middlePanelLayout.createSequentialGroup()
                .addComponent(requestCommand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton))
        );
        middlePanelLayout.setVerticalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(requestCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(sendButton))
        );

        middlePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {requestCommand, sendButton});

        bottomPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 8, true), "TERMINAL", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        scrollTextPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        terminalText.setEditable(false);
        terminalText.setColumns(20);
        terminalText.setRows(5);
        terminalText.setPreferredSize(new java.awt.Dimension(500, 550));
        scrollTextPane.setViewportView(terminalText);

        javax.swing.GroupLayout bottomPaneLayout = new javax.swing.GroupLayout(bottomPane);
        bottomPane.setLayout(bottomPaneLayout);
        bottomPaneLayout.setHorizontalGroup(
            bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTextPane)
        );
        bottomPaneLayout.setVerticalGroup(
            bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(middlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bottomPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(middlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void localhostTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localhostTextActionPerformed
        
     
    }//GEN-LAST:event_localhostTextActionPerformed
    /*This code handles the port choice from the JComboBox. It takes the input and
      erases all whitespaces and parses it to a number.*/
    private void portChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portChoiceActionPerformed
  
        JComboBox cb = (JComboBox)evt.getSource();
        String port = (String)cb.getSelectedItem();
      
        try{
        portNo = Integer.parseInt(port.trim());
        } catch(NumberFormatException e){
        }
    }//GEN-LAST:event_portChoiceActionPerformed

    private void portChoiceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_portChoiceFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_portChoiceFocusGained

    private void portChoiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portChoiceKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_portChoiceKeyPressed

    private void requestCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestCommandActionPerformed

    }//GEN-LAST:event_requestCommandActionPerformed

    /*Creates a SocketSonnect object and runs it to start a connection to a server*/
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        sC = new SocketConnect();
        hostName = localhostText.getText();
        sC.run(); 
    }//GEN-LAST:event_connectButtonActionPerformed

    /*This handles the event when the 'Send' button is clicked. It wil send whatever command
      to the ServerSonnect class method sendCommand; it then brings the focus back to itself
      for further commands.*/
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String str = requestCommand.getText();
        sC.sendCommand(str); 
        requestCommand.requestFocus();
    }//GEN-LAST:event_sendButtonActionPerformed
    
    
    /**
    * This class create the socket used by the client to connect to the Server. It sets
    * up the input and output streams and has a method to send commands generated from 
    * the client to the server and receives and displays feedback.
    *   
    * @author Nathan M. Abbey
    * @version 1.0
    * @see ServerSocketRunnable.java
    * @since 1.8_066
     */
    public class SocketConnect implements Runnable{
   
      int port = portNo;
      String host = hostName; 
      Socket theSocket = null;
      ObjectInputStream oIS;
      ObjectOutputStream oOS;
     
     /*This method handles all of the commands which is fed in via parameter*/
    public void sendCommand(String str){
 
        /*This string holds the command temporarily*/
        String theLine = str;
 
            /*Writes the command to the Server*/
            try {
              oOS.writeObject(theLine);
            } catch (IOException ex) {
              Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            }
    
            /*Clears the terminal screen if the user puts in the right command*/
            if (theLine.equals("-clrs")){
            terminalText.setText(" ");
            return;
            }
     
            try {
              oOS.flush();
            } catch (IOException ex) {
              Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            }
   
        /*String that temporarily holds the input sent from the Server*/
        String tempString = "";
        
          try {
              tempString = (String)oIS.readObject();
          } catch (IOException ex) {
              Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
          } catch (ClassNotFoundException ex) {
              Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
          }

        /*Takes the input from the server and displays it to the temrinal*/
	terminalText.append(tempString + "\n");

        /*Disables and enables buttons and changes Connect button colour when user quits*/
        if(theLine.equals("-quit")){
            connectButton.setBackground(Color.red);
            connectButton.setEnabled(true);
            sendButton.setEnabled(false);
            terminalText.append("CLIENT> Connection closed.");
        }
                
    }
      
      
        /*This method creates the client Socket object using the port number and hostname
          set above. It then sets the input and output streams and handles user interactions*/
        @Override
        public void run() {
      
            try {
                
            /*Creation of the Socket object and initializing of the input and output streams*/    
	    theSocket = new Socket(host, portNo);
            oIS = new ObjectInputStream(theSocket.getInputStream());
            oOS = new ObjectOutputStream(theSocket.getOutputStream());      
            
            /*Gets input from server upon connection*/
            String temp = "";
            try {
                temp = (String)oIS.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClientView.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /*Displays the welcoming text from the server and changes the Connect button color and 
              disables it, and enables the Send button.*/
            terminalText.setText(temp + "\n");
            connectButton.setBackground(Color.BLUE);
            connectButton.setEnabled(false);
            sendButton.setEnabled(true);
   
            }catch (IOException e){
                
                /*If the connection failes, this error message is displayed on the terminal*/
                terminalText.setText("ERROR: Unable to connect. Please make sure you have the correct network information.\n"
                + "INFO  [   Host: " + host + "      Port: " + portNo + "   ]");
            }
          }
	}
         
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField localhostText;
    private javax.swing.JPanel middlePanel;
    private javax.swing.JComboBox<String> portChoice;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField requestCommand;
    private javax.swing.JScrollPane scrollTextPane;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea terminalText;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}